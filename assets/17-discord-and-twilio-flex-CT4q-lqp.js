const n=`---
title: "डिस्कॉर्ड (3/3): डिस्कॉर्ड और ट्विलियो फ्लेक्स: फ्लेक्स संपर्क केंद्र को अज्ञात क्षेत्र में लाना"
metatitle: "डिस्कॉर्ड (3/3): डिस्कॉर्ड में ट्विलियो फ्लेक्स संपर्क केंद्र"
date: 2022-06-07 12:32:24-07:00
modified_date: 2025-07-28T16:56:53Z
draft: false
author: Kim Dodds
description: "इस ब्लॉग में, हम यह प्रदर्शित करेंगे कि कैसे Seasalt.ai ने एक पूर्ण संपर्क केंद्र को डिस्कॉर्ड सर्वर में एकीकृत किया।"
weight: 1
tags:
  - SeaX
  - Discord
image: /images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/flex-discord-thumbnail.png
canonicalURL: /blog/discord-and-twilio
url: /blog/discord-and-twilio/
---

*यह डिस्कॉर्ड पर ग्राहक जुड़ाव के बारे में तीन-भाग की श्रृंखला में हमारी आखिरी पोस्ट है। हमारे पहले ब्लॉग, [“ग्राहक जुड़ाव के लिए एक नई सीमा”](https://seasalt.ai/blog/15-discord-a-new-frontier-for-customer-engagement/), ने डिस्कॉर्ड की लोकप्रियता में वृद्धि, और ब्रांडों के लिए अपने स्वयं के ऑनलाइन समुदायों को बनाने और उनमें भाग लेने के लिए प्रस्तुत नए अवसर पर चर्चा की। भाग दो में, [“अपने ब्रांड के लिए डिस्कॉर्ड समुदाय और बॉट कैसे बनाएं”](https://seasalt.ai/blog/16-discord-how-to-create-a-discord-community-and-bot-for-your-brand/), हमने आपके ब्रांड के लिए डिस्कॉर्ड सर्वर कैसे बनाएं, और सर्वर मॉडरेशन, घोषणाओं, उपयोगकर्ता प्रतिक्रिया आदि को प्रबंधित करने के लिए बॉट को कैसे एकीकृत करें, इस पर विस्तार से बताया। अंत में, इस ब्लॉग में हम यह प्रदर्शित करेंगे कि कैसे हमने Seasalt.ai पर एक पूर्ण संपर्क केंद्र को डिस्कॉर्ड सर्वर में एकीकृत किया, जिससे ब्रांडों को प्लेटफ़ॉर्म पर ग्राहक सेवा के सभी पहलुओं को संभालने की अनुमति मिली।*

## विषय-सूची
- [विषय-सूची](#table-of-contents)
- [डिस्कॉर्ड ग्राहक सेवा डेमो](#discord-customer-service-demo)
- [ट्विलियो फ्लेक्स](#twilio-flex)
- [SeaX](#seax)
- [डेमो सर्वर](#demo-server)
  - [1-से-अनेक सहायता: आधिकारिक चैनल](#1-to-many-help-official-channels)
  - [1-से-1 सहायता: ग्राहक सेवा एजेंट](#1-to-1-help-customer-service-agent)
    - [ज्ञानकोष](#knowledge-base)
    - [लाइव एजेंट स्थानांतरण](#live-agent-transfer)
  - [मामला प्रबंधन](#case-management)
- [तकनीकी गहरा गोता](#technical-deep-dive)
  - [फ्लेक्स प्रवाह को परिभाषित करें](#define-the-flex-flow)
  - [एक कस्टम चैनल बनाएं](#create-a-custom-channel)
  - [अधिक जटिल रूटिंग का समर्थन करने के लिए एक HTTP सर्वर बनाएं](#create-an-http-server-to-support-more-complex-routing)
    - [आउटबाउंड संदेश वेबहुक](#outbound-messages-webhook)
    - [बॉट एकीकरण](#bot-integration)
- [सारांश](#summary)

# डिस्कॉर्ड ग्राहक सेवा डेमो
यदि आप सीधे मुद्दे पर आना चाहते हैं और अंतिम उत्पाद देखना चाहते हैं, तो हम पहले अंतिम डेमो वीडियो प्रस्तुत करेंगे:

<iframe width="85%" height="450px" src="https://www.youtube.com/embed/iUK4YkGYI6Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="border-radius: 30px;"></iframe>


हमारा लक्ष्य यह प्रदर्शित करना है कि कैसे डिस्कॉर्ड को मौजूदा ग्राहक सेवा सॉफ़्टवेयर (इस मामले में, [ट्विलियो फ्लेक्स](https://flex.twilio.com/)) में एकीकृत किया जा सकता है ताकि किसी ब्रांड के आधिकारिक सर्वर में अतिरिक्त मूल्य जोड़ा जा सके। हमारे कार्यान्वयन पर करीब से नज़र डालने के लिए पढ़ते रहें।

# ट्विलियो फ्लेक्स
ट्विलियो एक सुस्थापित संचार कंपनी है जो टेक्स्ट संदेश, फोन कॉल, ईमेल, चैट संदेश और बहुत कुछ प्रबंधित करने के लिए एपीआई प्रदान करती है। फ्लेक्स ट्विलियो के प्रमुख उत्पादों में से एक है: एक स्केलेबल क्लाउड-आधारित संपर्क केंद्र जो किसी भी स्रोत से संदेशों और कॉलों को वर्चुअल और लाइव एजेंटों तक पहुंचाता है। हमने अपने संपर्क केंद्र एकीकरण के आधार के रूप में फ्लेक्स को चुना क्योंकि यह पहले से ही फेसबुक, एसएमएस और व्हाट्सएप जैसे विभिन्न चैनलों के लिए उत्कृष्ट समर्थन प्रदान करता है।

# SeaX
SeaX एक क्लाउड संपर्क केंद्र है जो उन्नत AI सुविधाओं के साथ गहराई से एकीकृत है जो उत्पादकता और ग्राहकों की संतुष्टि को बढ़ाने में मदद करता है। SeaX Seasalt.ai के प्रमुख उत्पादों में से एक है, और इसे पहले ही 150 से अधिक देशों में ग्राहकों के लिए शुरू किया जा चुका है। SeaX संपर्क केंद्र प्लेटफ़ॉर्म ट्विलियो फ्लेक्स के शीर्ष पर बनाया गया है और इसमें कई अतिरिक्त सुविधाएँ शामिल हैं जो लाइव एजेंटों को ग्राहकों की बेहतर सहायता करने में सशक्त बनाती हैं। कुछ सबसे उपयोगी सुविधाओं में इन-हाउस टेक्स्ट-टू-स्पीच और स्पीच-टू-टेक्स्ट, AI-संचालित ज्ञानकोष और एकीकृत मामला प्रबंधन प्रणाली शामिल हैं। SeaX प्लेटफ़ॉर्म की सभी क्षमताओं के बारे में अधिक जानकारी के लिए, कृपया [SeaX होमपेज](https://seax.seasalt.ai/?utm_source=blog/) पर जाएँ।

# डेमो सर्वर
अब हम यह बताएंगे कि हमने अपना डिस्कॉर्ड सर्वर कैसे स्थापित किया। डेमो के प्रयोजनों के लिए, हमने एक ऐसे परिदृश्य की कल्पना की जहाँ हमारे सर्वर का उपयोग पोकेमॉन गो जैसे गेम के लिए एक समुदाय के रूप में किया गया था! निम्न तालिका हमारे डिस्कॉर्ड सर्वर पर प्रदर्शित कुछ सुविधाओं का अवलोकन करती है।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-demo-features-2.png" alt="डेमो ग्राहक सेवा डिस्कॉर्ड सर्वर की सुविधा अवलोकन।"/>

*डेमो डिस्कॉर्ड सर्वर की सुविधा अवलोकन।*
</center>

## 1-से-अनेक सहायता: आधिकारिक चैनल
सर्वर में कई चैनल आधिकारिक व्यवस्थापकों/डेवलपर्स और खिलाड़ियों के बीच एक सीधा प्रवाह प्रदान करने के लिए स्थापित किए गए हैं।
**घोषणा चैनल** में केवल व्यवस्थापक और मॉडरेटर ही पोस्ट कर सकते हैं, और इसमें ट्विटर खाते, वेबसाइट या अन्य आधिकारिक स्रोतों से (मैनुअल या स्वचालित) पोस्ट शामिल हो सकते हैं।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-demo-announcement-channel.jpg" alt="डिस्कॉर्ड सर्वर पर घोषणा चैनल, जिसमें एक आधिकारिक ट्विटर खाते से एक पोस्ट है।"/>

*डेमो डिस्कॉर्ड सर्वर पर #announcements चैनल।*
</center>

**बग-रिपोर्ट चैनल** खिलाड़ियों को बग और गेम-ब्रेकिंग मुद्दों पर चर्चा करने की अनुमति देता है। व्यवस्थापक इस चैनल पर नज़र रख सकते हैं ताकि गेम में किसी भी ऐसे मुद्दे की पहचान की जा सके जिसे लक्षित किया जाना चाहिए। इसके अतिरिक्त, उपयोगकर्ता चैनल के भीतर से \`/bug\` स्लैश कमांड का उपयोग करके एक आधिकारिक बग रिपोर्ट प्रस्तुत कर सकते हैं।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-demo-bug-report-channel.jpg" alt="डिस्कॉर्ड सर्वर पर बग रिपोर्ट चैनल, जिसमें एक सबमिट की गई बग रिपोर्ट है।"/>

*डेमो डिस्कॉर्ड सर्वर पर #bug-report चैनल, जिसमें एक सबमिट की गई बग रिपोर्ट है।*
</center>

**सुविधा-अनुरोध चैनल** खिलाड़ियों को गेमप्ले परिवर्तन, जीवन की गुणवत्ता में सुधार, सामग्री परिवर्धन आदि पर चर्चा करने की अनुमति देता है, जिन्हें वे गेम में जोड़ा देखना चाहेंगे। बग अनुरोध चैनल के समान, उनकी प्रतिक्रिया डिस्कॉर्ड मॉड द्वारा देखी जा सकती है और वे एक आधिकारिक अनुरोध प्रस्तुत करने के लिए \`/new_feature\` स्लैश कमांड का उपयोग कर सकते हैं।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-demo-feature-request-channel.jpg" alt="डिस्कॉर्ड सर्वर पर सुविधा अनुरोध चैनल, जिसमें एक उपयोगकर्ता स्लैश कमांड का प्रदर्शन कर रहा है।"/>

*डेमो डिस्कॉर्ड सर्वर पर #feature-request चैनल, जिसमें एक उपयोगकर्ता स्लैश कमांड का प्रदर्शन कर रहा है।*
</center>

## 1-से-1 सहायता: ग्राहक सेवा एजेंट

खिलाड़ी एक एजेंट के साथ एक सीधा संदेश शुरू करने के लिए \`/helpme\` स्लैश कमांड का उपयोग कर सकते हैं। ग्राहक सेवा एजेंट या तो स्वचालित (वर्चुअल एजेंट) हो सकता है या एक लाइव एजेंट द्वारा संचालित किया जा सकता है।

हमारे डेमो के लिए, हमने एक सरल FAQ बॉट स्थापित किया है जो उपयोगकर्ता को प्रासंगिक लेख सुझाव प्रदान करने के लिए कंपनी के ज्ञानकोष से पूछताछ करता है। उपयोगकर्ता एक लाइव एजेंट का भी अनुरोध कर सकता है, और उसे उसी चैट में SeaX पर एक लाइव एजेंट को स्थानांतरित कर दिया जाएगा।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-demo-customer-service-channel.jpg" alt="डिस्कॉर्ड सर्वर पर ग्राहक सेवा चैनल, जिसमें एक उपयोगकर्ता डीएम शुरू कर रहा है।"/>

*डेमो डिस्कॉर्ड सर्वर पर #feature-request चैनल, जिसमें एक उपयोगकर्ता डीएम शुरू कर रहा है।*
</center>

### ज्ञानकोष
जब उपयोगकर्ता वर्चुअल सेवा एजेंट को एक प्रश्न प्रस्तुत करता है, तो एजेंट उपयोगकर्ता को ज्ञानकोष में प्रासंगिक लेखों का संदर्भ दे सकता है।

### लाइव एजेंट स्थानांतरण
एक बार जब कोई उपयोगकर्ता बॉट के साथ सीधे संदेश में होता है, तो वे एक लाइव एजेंट का अनुरोध कर सकते हैं। उन्हें तुरंत सूचित किया जाएगा कि उनके लिए एक मामला बनाया गया है, और उन्हें एक लाइव एजेंट को स्थानांतरित किया जा रहा है। जब लाइव एजेंट चैट में शामिल होता है, तो उन्हें भी एक सूचना मिलेगी।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-demo-customer-service-dm.jpg" alt="ग्राहक सेवा के साथ एक सीधा संदेश, जिसमें केबी लेख सुझाव, लाइव एजेंट स्थानांतरण और मामला प्रबंधन शामिल है।"/>

*ग्राहक सेवा के साथ एक सीधा संदेश, जिसमें केबी लेख सुझाव, लाइव एजेंट स्थानांतरण और मामला प्रबंधन शामिल है।*
</center>

बैकएंड पर, लाइव एजेंट सभी चैनलों (एसएमएस, फेसबुक, डिस्कॉर्ड, वॉयस कॉल, आदि) से आने वाली कॉलों और चैट संदेशों को एक ही प्लेटफॉर्म के माध्यम से संभाल सकते हैं। इस मामले में, बैकएंड प्लेटफॉर्म SeaX है।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/flex-discord-channel.jpg" alt="SeaX इंटरफ़ेस जो डिस्कॉर्ड पर एक उपयोगकर्ता के साथ बातचीत के लाइव एजेंट के दृश्य को प्रदर्शित करता है।"/>

*SeaX इंटरफ़ेस जो डिस्कॉर्ड पर एक उपयोगकर्ता के साथ बातचीत के लाइव एजेंट के दृश्य को प्रदर्शित करता है।*
</center>

## मामला प्रबंधन
इस डेमो में हम जिस एक सुविधा पर जोर देना चाहते थे, वह है मामला प्रबंधन। Seasalt.ai का डिस्कॉर्ड समाधान SeaX मामला प्रबंधन प्रणाली के साथ एकीकृत होता है ताकि उपयोगकर्ताओं से विभिन्न मामलों को ठीक से ट्रैक किया जा सके। जब कोई उपयोगकर्ता डिस्कॉर्ड बॉट के साथ इंटरैक्ट करता है (जैसे कि एक लाइव एजेंट का अनुरोध करना या बग की रिपोर्ट करना), तो हम स्वचालित रूप से एक नया मामला खोल सकते हैं और उपयोगकर्ता और उनके द्वारा अनुभव की जा रही समस्या के बारे में सभी महत्वपूर्ण जानकारी लॉग कर सकते हैं। यह लाइव एजेंट को सभी रिपोर्ट किए गए मुद्दों तक आसान पहुंच प्रदान करता है, और यह सुनिश्चित करता है कि वे मामले का समाधान होने तक उपयोगकर्ताओं के साथ अनुवर्ती कार्रवाई करें।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-new-case.png" alt="SeaX मामला प्रबंधन प्रणाली में एक नया मामला बनाना।"/>

*SeaX मामला प्रबंधन प्रणाली में एक नया मामला बनाना।*

<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-existing-case.png" alt="SeaX मामला प्रबंधन प्रणाली में एक मौजूदा मामला देखना।"/>

*SeaX मामला प्रबंधन प्रणाली में एक मौजूदा मामला देखना।*

</center>

# तकनीकी गहरा गोता

अब हमने अंतिम उत्पाद और सर्वर के सदस्यों और उनकी सहायता करने वाले लाइव एजेंटों के लिए उपलब्ध सभी सुविधाओं को देख लिया है। लेकिन पूरी चीज़ वास्तव में कैसे लागू की गई थी? हमारे पिछले ब्लॉग पोस्ट में, “[अपने ब्रांड के लिए डिस्कॉर्ड समुदाय और बॉट कैसे बनाएं](https://seasalt.ai/blog/16-discord-how-to-create-a-discord-community-and-bot-for-your-brand/)”, हमने आपके ब्रांड के लिए डिस्कॉर्ड सर्वर कैसे बनाएं और इसे प्रबंधित करने के लिए डिस्कॉर्ड बॉट को कैसे एकीकृत करें, इस पर विस्तार से बताया। इस अधिक उन्नत डेमो का समर्थन करने के लिए, हमने [SeaChat, Seasalt.ai का संवादी AI इंजन](https://chat.seasalt.ai) का भी उपयोग किया, ताकि एक सरल चैटबॉट बनाया जा सके जो हमारे डिस्कॉर्ड बॉट को उपयोगकर्ताओं के लिए प्राकृतिक भाषा प्रश्नों को संभालने की अनुमति देता है।

SeaX की ओर से, हमारी टीम ने ट्विलियो के साथ मिलकर ट्विलियो फ्लेक्स के शीर्ष पर निर्मित एक सुविधा संपन्न संपर्क केंद्र समाधान बनाने के लिए मिलकर काम किया। ट्विलियो फ्लेक्स और सेटअप प्रक्रिया कैसे काम करती है, इसके बारे में अधिक जानकारी के लिए, आप [ट्विलियो फ्लेक्स क्विकस्टार्ट गाइड](https://www.twilio.com/docs/flex/quickstart) पढ़ सकते हैं।

डिस्कॉर्ड सर्वर, डिस्कॉर्ड बॉट और चैटबॉट तैयार करने और यह सुनिश्चित करने के बाद कि हमारे पास SeaX का एक कार्यशील उदाहरण चल रहा है, सबसे बड़ी चुनौती उपयोगकर्ता, बॉट और SeaX पर लाइव एजेंटों से और तक संदेशों को ठीक से रूट करना है। ट्विलियो संदेश रूटिंग को संभालने में शानदार है, इसलिए हमारा लक्ष्य हमारे डिस्कॉर्ड बॉट सर्वर के भीतर से सभी स्लैश कमांड को संभालना है, और फिर अन्य सभी संदेशों (जैसे चैटबॉट या लाइव एजेंट को सीधे संदेश) को ट्विलियो को अग्रेषित करना है।

## फ्लेक्स प्रवाह को परिभाषित करें
पहला कदम यह सुनिश्चित करना है कि हम ट्विलियो को जो भी संदेश भेजते हैं, वे सही जगह पर रूट किए जाएंगे। हमने एक सरल ट्विलियो प्रवाह स्थापित किया है जो पहले यह जांचता है कि उपयोगकर्ता ने एक लाइव एजेंट का अनुरोध किया है या नहीं, और यदि ऐसा है तो निम्नलिखित संदेशों को SeaX को अग्रेषित करता है। यदि उपयोगकर्ता ने एक लाइव एजेंट का अनुरोध नहीं किया है, तो हम प्रतिक्रिया प्राप्त करने के लिए संदेश को चैटबॉट को अग्रेषित करते हैं। प्रवाह को कैसे स्थापित करें, इसके बारे में अधिक जानकारी के लिए, [ट्विलियो स्टूडियो प्रवाह प्रलेखन](https://www.twilio.com/docs/studio) देखें।

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-flow.png" alt="एक सरल फ्लेक्स स्टूडियो प्रवाह जो आने वाले संदेशों को चैटबॉट या SeaX पर रूट करता है।"/>

*एक सरल फ्लेक्स स्टूडियो प्रवाह जो आने वाले संदेशों को चैटबॉट या SeaX पर रूट करता है।*
</center>

## एक कस्टम चैनल बनाएं
तो अब हमें इस बात का अंदाजा है कि आने वाले संदेशों को कैसे रूट किया जाएगा। हालाँकि, डिस्कॉर्ड ट्विलियो द्वारा मूल रूप से समर्थित चैनल नहीं है। शुक्र है, ट्विलियो के पास [ट्विलियो फ्लेक्स में एक कस्टम चैट चैनल कैसे जोड़ें](https://www.twilio.com/blog/add-custom-chat-channel-twilio-flex) पर एक विस्तृत ट्यूटोरियल है। ट्विलियो पर नया कस्टम चैनल स्थापित करने के लिए गाइड का पालन करने के बाद, हमें वास्तव में डिस्कॉर्ड से संदेशों को ट्विलियो को अग्रेषित करने की आवश्यकता है।

पहले हम ट्विलियो क्लाइंट स्थापित करते हैं:

\`\`\`python
from twilio.rest import Client
twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
\`\`\`

अब, एक बार जब हमें डिस्कॉर्ड से एक आने वाला संदेश प्राप्त होता है, तो हम उस संदेश को ट्विलियो क्लाइंट के माध्यम से ट्विलियो को अग्रेषित कर सकते हैं। सबसे पहले, हमें यह जांचना चाहिए कि उपयोगकर्ता पहले से ही ट्विलियो सिस्टम में मौजूद है या नहीं, और क्या उनके पास पहले से ही एक खुला चैट चैनल है।

\`\`\`python
# उपयोगकर्ता मौजूद है या नहीं यह जांचने के लिए get_user विधि को कॉल करें, और यदि नहीं है तो एक नया बनाएं
user = await get_user(user_id, twilio_client, TWILIO_SERVICE_SID)

# उन चैनलों को प्राप्त करें जिनमें उपयोगकर्ता है
user_channels = twilio_client.chat \\
        .services(TWILIO_SERVICE_SID) \\
        .users(user_id) \\
        .user_channels \\
        .list()
\`\`\`

यदि उपयोगकर्ता के पास एक मौजूदा खुला चैट चैनल है, तो हमें उसका उपयोग करने की आवश्यकता है ताकि हमें चैट इतिहास तक पहुंच प्राप्त हो सके। यदि कोई मौजूदा चैट चैनल नहीं है, तो हम उपयोगकर्ता के लिए एक नया बनाते हैं:

\`\`\`python
if user_channels:
    channel_sid = user_channels[-1].channel_sid
else:
    channel = twilio_client.flex_api \\
            .channel \\
            .create(
                flex_flow_sid=FLEX_FLOW_ID,
                chat_user_friendly_name=username,
                chat_friendly_name=chat_name,  # -> चैट चैनल का अनुकूल नाम
                target=conversation_id,  # -> वह पहचान जो चैट उपयोगकर्ता को विशिष्ट रूप से पहचानती है
                identity=conversation_id,  # -> उपयोगकर्ता, उदाहरण/ डिस्कॉर्ड डीएम आईडी
        )
    channel_sid = channel.sid
\`\`\`

अंत में, एक बार जब हमारे पास डिस्कॉर्ड उपयोगकर्ता और ट्विलियो के बीच एक खुला चैट चैनल होता है, तो हम आने वाले संदेश को ट्विलियो स्टूडियो प्रवाह में अग्रेषित कर सकते हैं।

\`\`\`python
message = twilio_client.chat \\
        .services(TWILIO_SERVICE_SID) \\
        .channels(channel_sid) \\
        .messages \\
        .create(
            body=message_text,
            from_=user_id,
            x_twilio_webhook_enabled='true',
            attributes=json.dumps(message_json)  # हेडर को विशेषता के रूप में भेजें ताकि यह बाद में सुलभ हो
        )
\`\`\`
अब हमारे पास अपने सभी आने वाले संदेशों को डिस्कॉर्ड उपयोगकर्ताओं से सीधे हमारे ट्विलियो फ्लेक्स प्रवाह में अग्रेषित करने की क्षमता है। डिस्कॉर्ड बॉट की ओर से, सुनिश्चित करें कि सभी सीधे संदेश ट्विलियो को अग्रेषित किए जा रहे हैं। अब आप डिस्कॉर्ड बॉट को एक सीधा संदेश भेजने का प्रयास कर सकते हैं, और आपको इसे ट्विलियो स्टूडियो प्रवाह लॉग में दिखाई देना चाहिए - हालाँकि हम अभी तक समाप्त नहीं हुए हैं!

## अधिक जटिल रूटिंग का समर्थन करने के लिए एक HTTP सर्वर बनाएं

### आउटबाउंड संदेश वेबहुक
तो अब हमें इस बात का अंदाजा है कि हमारे आने वाले संदेशों को कैसे रूट किया जाएगा। हालाँकि, हम अभी भी कुछ टुकड़ों को याद कर रहे हैं। सबसे पहले, हम जानते हैं कि अब हम ट्विलियो को संदेश भेज सकते हैं, लेकिन हम डिस्कॉर्ड पर अपने उपयोगकर्ताओं को कैसे जवाब दें? हमारा डिस्कॉर्ड बॉट ही एकमात्र ऐसी चीज़ है जो हमारे डिस्कॉर्ड सर्वर और उपयोगकर्ताओं को संदेश भेजने के लिए अधिकृत है, और ट्विलियो को वैसे भी हमारे संदेशों को डिस्कॉर्ड सर्वर पर वापस कैसे भेजना है, यह नहीं पता है। समाधान यह है कि हमें एक आउटबाउंड संदेश वेबहुक स्थापित करने की आवश्यकता है जो हर बार ट्विलियो चैट चैनल में एक नया संदेश होने पर चालू हो जाएगा। उस वेबहुक के भीतर, हम फिर अपने डिस्कॉर्ड बॉट का उपयोग करके संदेश को वापस हमारे सर्वर पर अग्रेषित कर सकते हैं।

ऐसा करने के लिए, हम अपने डिस्कॉर्ड बॉट को एक अधिक मजबूत HTTP सर्वर में एकीकृत करते हैं। हमने एक सरल POST एंडपॉइंट स्थापित करने के लिए [FastAPI](https://fastapi.tiangolo.com/) का उपयोग किया जो हमारे आउटबाउंड संदेश वेबहुक के रूप में काम करेगा। एक बार जब हम सर्वर स्थापित कर लेते हैं और हमारा डिस्कॉर्ड बॉट इसके साथ चल रहा होता है, तो हम POST एंडपॉइंट को परिभाषित कर सकते हैं।

यह एंडपॉइंट चैट चैनल में जोड़े गए प्रत्येक संदेश को प्राप्त करेगा, इसलिए हम पहले SeaX से आउटबाउंड संदेशों को छोड़कर सब कुछ फ़िल्टर करना चाहते हैं। अगला, हमें संदेश के मुख्य भाग से सही चैनल आईडी प्राप्त करने की आवश्यकता होगी ताकि हम जान सकें कि संदेश को कहाँ अग्रेषित करना है। अंत में, हम संदेश को डिस्कॉर्ड चैनल पर अग्रेषित करने के लिए डिस्कॉर्ड क्लाइंट का उपयोग कर सकते हैं।

\`\`\`python
@app.post("/forward-to-discord", status_code=200)
async def forward_discord_message(request: Request, response: Response) -> None:
    raw_body = await request.body()
    body = urllib.parse.parse_qs(raw_body.decode())

    # केवल SDK (फ्लेक्स, अन्य सभी API से होंगे) से संदेशों पर ध्यान दें
    if not body.get('Source') == ['SDK']:
        return

    # फ्लेक्स से संदेशों में मूल संदेश का वार्तालाप आईडी नहीं होता है
    # हमें GBM पर वार्तालाप पर संदेश वापस भेजने के लिए convId की आवश्यकता है
    # पिछला संदेश प्राप्त करें और वार्तालाप आईडी निकालें
    message = twilio_client.chat \\
            .services(TWILIO_SERVICE_SID) \\
            .channels(body.get("ChannelSid")[0]) \\
            .messages.list(limit=1)[0]

    attributes = json.loads(message.attributes)

    channel = discord_client.get_channel(attributes.get(“channel”, {}).get(“id”))
    if channel:
        await channel.send(body.get("Body", [""])[0].get(“text”))
    else:
        logger.error(f"आईडी के साथ डिस्कॉर्ड चैनल नहीं मिला: {get_channel_id(req)}!")
        response.status_code = 400
\`\`\`

अंत में, संदेशों को हमारे एंडपॉइंट पर भेजने के लिए, हमें ट्विलियो को यह बताने की आवश्यकता है कि हमारा नया वेबहुक क्या है। प्रत्येक चैट चैनल को अपना स्वयं का वेबहुक कॉन्फ़िगर करने की आवश्यकता होती है। इसलिए, यदि हम वापस जाते हैं जहाँ हमने मूल रूप से उपयोगकर्ता के लिए नया चैट चैनल बनाया था, तो हम वेबहुक को कॉन्फ़िगर करने के लिए कुछ अतिरिक्त कोड जोड़ सकते हैं:

\`\`\`python
webhook = twilio_client.chat \\
        .services(TWILIO_SERVICE_SID) \\
        .channels(channel_sid) \\
        .webhooks \\
        .create(
            type='webhook',   
configuration_url=f"{SERVER_HOST}/forward-to-discord",
            configuration_method="POST",
            configuration_filters=["onMessageSent", "onMessageUpdated", "onMediaMessageSent"]
        )
\`\`\`

### बॉट एकीकरण

तो अब SeaX से आउटबाउंड संदेशों को हमारे डिस्कॉर्ड सर्वर पर सही ढंग से रूट किया जाना चाहिए। लेकिन हमने अभी भी उन संदेशों को संबोधित नहीं किया है जो चैटबॉट पर जाते हैं। हमें एक अंतिम एंडपॉइंट स्थापित करने की आवश्यकता है जो ट्विलियो स्टूडियो प्रवाह से चालू हो जाएगा और उपयोगकर्ता संदेश प्राप्त करेगा, बॉट से पूछताछ करेगा, और प्रतिक्रिया को डिस्कॉर्ड पर वापस कर देगा।

\`\`\`python
@app.post("/chatbot-to-discord", status_code=200)
async def receive_discord_message(request: Request, response: Response):
    """ट्विलियो से POST अनुरोध प्राप्त करें, बॉट से पूछताछ करें, और प्रतिक्रिया को डिस्कॉर्ड पर वापस करें।"""
    req = await request.body()
    # मूल संदेश के मुख्य भाग को ट्विलियो सामग्री से अलग करें
    twilio_body, original_message_body = separate_original_message_body(req.decode())

    bot_response = await query_bot(original_message_body, bot_info)

    if bot_response:
        channel = discord_client.get_channel(original_message_body.get(“channel_id”))
        if channel:
            for item in bot_response:
                await channel.send(item.get(“text”))
\`\`\`

सुनिश्चित करें कि ट्विलियो स्टूडियो प्रवाह में बॉट को संदेशों को रूट करने के लिए सही वेबहुक है। अब हमने अपना संदेश रूटिंग समाप्त कर लिया है! हम इस आरेख में सभी संदेश रूटिंग का एक शीर्ष-स्तरीय दृश्य देख सकते हैं:

<center>
<img src="/images/blog/17-discord-and-twilio-flex-bringing-flex-contact-center-into-uncharted-territory/discord-flex-routing-diagram.jpg" alt="संदेश रूटिंग आरेख।"/>

*संदेश रूटिंग आरेख।*
</center>

# सारांश
समाप्त करने के लिए, इस ब्लॉग श्रृंखला में हमने डिस्कॉर्ड की लोकप्रियता में वृद्धि और ब्रांडों के लिए ग्राहकों के साथ जुड़ने के लिए एक नए मंच के रूप में प्रस्तुत अवसर पर चर्चा की है। हमने डिस्कॉर्ड की कुछ बुनियादी विशेषताओं के बारे में बताया है, यह दिखाने के लिए कि कोई ब्रांड अपना स्वयं का ऑनलाइन समुदाय कैसे स्थापित कर सकता है, साथ ही अधिक उन्नत सुविधाएँ जो ब्रांडों को डिस्कॉर्ड बॉट के साथ अपने सर्वर पर मॉडरेशन और ग्राहक सहायता को स्वचालित करने की अनुमति देती हैं। अंत में, हमने अपना प्रदर्शन साझा किया कि कैसे हमने डिस्कॉर्ड को अपने ग्राहक सेवा मंच, SeaX के साथ एकीकृत किया, ताकि डिस्कॉर्ड समुदाय में लाइव एजेंट स्थानांतरण, मामला प्रबंधन और AI-संचालित ज्ञानकोष खोज जैसी उन्नत सुविधाएँ लाई जा सकें।
एक व्यक्तिगत डेमो के लिए, या यह देखने के लिए कि Seasalt.ai आपकी विशिष्ट व्यावसायिक आवश्यकताओं को पूरा करने में कैसे मदद कर सकता है, कृपया हमारा “[डेमो बुक करें](https://meetings.hubspot.com/seasalt-ai/seasalt-meeting)” फ़ॉर्म भरें। फ्लेक्स/डिस्कॉर्ड एकीकरण के बारे में अधिक जानकारी के लिए या हमसे संपर्क करने के लिए, कृपया [Seasalt.ai की ट्विलियो पार्टनर लिस्टिंग](https://showcase.twilio.com/partner-listing/a8E8Z000000PDCQUA4) पर जाएँ।`;export{n as default};
